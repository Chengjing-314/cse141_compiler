set 0
mov r1 r0   # r1 = outer
set 0
mov r2 r0   # r2 = byte_cnt
set 0
mov r3 r0   # r3 = occ_cnt
set 0b1001  # set 32
lw r4 r0    # r4 = txt[32]
set 0b11111
lsl r0 3    # r0 = 0b11111000
and r4 r0
lsr r0 3
mov r4 r0   # r4 = pattern = (txt[32] & 0b11111000) >> 3
set 1
bne condition1
start1:
lw r5 r1    # cur = txt[outer]
set 0
mov r6 r0   # r6 = inner = 0
set 0
mov r7 r0   # r7 = occ_flag = 0
set 1
bne condition2
start2:
set 0b11111
and r5 r0
lsr r5 1
xor r0 r4
bne if1:
set 1
mov r7 r0   # occ_flag = 1
add r2 r0   # byte_cnt++
if1:
set 1
add r6 r0   # inner++
condition2:
set 0b100
xor r0 r6
bne start2
add r3 r7   # occ_cnt += occ_flag
set 1
add r1 r0   # outer++
condition1:
set 0b1001  # set 32
xor r0 r1
bne start1
set 0b1010  # set 33
sw r2 r0    # txt[33] = byte_cnt
set 0b1011  # set 34
sw r3 r0    # txt[34] = occ_cnt
set 0
mov r1 r0
set 1
bne condition3
start3:
lw r3 r1    # temp = txt[outer]
set 0b1111
and r3 r0
lsl r0 2
lsl r0 2
mov r5 r0   # cur = upper = (txt[outer] & 0b00001111) << 4
set 1
add r0 r1   # r0 = outer + 1
lw r3 r0    # temp = txt[outer+1]
set 0b11110
lsl r0 3
and r3 r0
lsr r0 2
lsr r0 2    # lower = (txt[outer+1] & 0b11110000) >> 4
add r5 r0   # cur = upper + lower
set 0
mov r6 r0   # r6 = inner = 0
set 1
bne condition4
start4:
set 0b11111
and r5 r0
lsr r5 1
xor r0 r4
bne if2:
set 1
add r2 r0   # byte_cnt++
if2:
set 1
add r6 r0   # inner++
condition4:
set 0b100
xor r0 r6
bne start4
set 1
add r1 r0   # outer++
condition3:
set 0b11111 # set 31
xor r0 r1
bne start3
set 0b1100  # set 35
sw r2 r0